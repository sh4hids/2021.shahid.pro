{"componentChunkName":"component---node-modules-sh-4-hids-gatsby-theme-open-sourcerer-src-templates-post-js","path":"/blog/2021/10/29/setting-up-eslint-and-prettier-in-a-node-project/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://v2021.shahid.pro","blogPath":"blog","baseEditUrl":"https://github.com/sh4hids/2021.shahid.pro/edit/main/contents/blog","utterancesCommentRepo":"sh4hids/shahid.pro-comments","author":{"fullName":"Shahidul Islam Majumder"}}},"markdownRemark":{"html":"<p>One of the best ways to make a codebase maintainable and consistent is to follow a proper code formatting and coding style. In a codebase with only one contributor, IDE can do the task of code formatting and linting (with some configuration and plugins). But where there are multiple contributors, maintaining proper formatting and linting is very difficult without any automated process. Everyone has their preferences regarding code formatting and coding style.</p>\n<p>In this post, I will try to show the step-by-step process of setting up prettier and eslint.</p>\n<h2 id=\"setting-up-eslint-and-prettier\" style=\"position:relative;\"><a href=\"#setting-up-eslint-and-prettier\" aria-label=\"setting up eslint and prettier permalink\" class=\"header-anchor-icon before\"><svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 162.656 162.656\" xml:space=\"preserve\" width=\"0.6em\" height=\"0.6em\" fill=\"#21AAE2\" stroke=\"#21AAE2\" stroke-width=\"0\"><path d=\"M151.764,10.894c-14.522-14.522-38.152-14.525-52.676-0.008l0.003,0.003L76.112,33.872l10.607,10.605l22.983-22.988 l-0.002-0.002c8.678-8.663,22.785-8.658,31.457,0.014c8.673,8.672,8.672,22.786,0,31.461l-34.486,34.484 c-4.201,4.202-9.787,6.516-15.729,6.516c-5.942,0-11.529-2.314-15.73-6.516L64.605,98.052c7.035,7.035,16.389,10.91,26.338,10.91 c9.949,0,19.303-3.875,26.335-10.91l34.487-34.484C166.284,49.043,166.284,25.413,151.764,10.894z\"></path> <path d=\"M52.96,141.162L52.96,141.162c-8.675,8.67-22.788,8.668-31.461-0.005c-8.673-8.675-8.673-22.791-0.001-31.465L55.98,75.21 c8.675-8.674,22.789-8.674,31.462,0L98.05,64.604c-14.524-14.523-38.154-14.524-52.676,0L10.89,99.086 c-14.519,14.523-14.519,38.154,0.001,52.678c7.263,7.262,16.801,10.893,26.341,10.892c9.536,0,19.074-3.629,26.333-10.887 l0.002-0.001l22.984-22.99l-10.608-10.606L52.96,141.162z\"></path> </svg></a>Setting Up ESLint and Prettier</h2>\n<p>ESLint is a static code analysis tool for identifying problematic patterns found in JavaScript code. It was created by Nicholas C. Zakas in 2013. Rules in ESLint are configurable, and customized rules can be defined and loaded. ESLint covers both code quality and coding style issues. [<a href=\"https://en.wikipedia.org/wiki/ESLint\">Wikipedia</a>]</p>\n<p>There are many popular style guides for JavaScript. We will be using the one provided by Airbnb (<a href=\"https://github.com/airbnb/javascript\">Airbnb JavaScript Style Guide</a>). You can initialize the setup process by running the following command in your project folder.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx eslint <span class=\"token parameter variable\">--init</span></code></pre></div>\n<p>There will be a prompt asking some questions regarding the configurations. Choose the options necessary based on your project.</p>\n<p>We need a few more packages for eslint to work with prettier. Run the following command in your terminal/cmd.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-D</span> eslint-plugin-prettier prettier @trivago/prettier-plugin-sort-imports eslint-config-prettier</code></pre></div>\n<p>Now open <code class=\"language-text\">.eslintrc.js</code> in your text editor and customize the configuration to match the following. You can add or customize any rules here.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// other config</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'airbnb-base'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'prettier'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'prettier'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// other config</span>\n  <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'prettier/prettier'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now create a file named <code class=\"language-text\">.prettierrc.js</code> and paste the following code. You can customize the settings as your project needs.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">printWidth</span><span class=\"token operator\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">tabWidth</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">singleQuote</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">trailingComma</span><span class=\"token operator\">:</span> <span class=\"token string\">'es5'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">importOrder</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'^@core/(.*)$'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'^@server/(.*)$'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'^@ui/(.*)$'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'^[./]'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">importOrderSeparation</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">experimentalBabelParserPluginsList</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'classProperties'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In your favorite text editor, add the prettier and eslint plugin and enable format on save option. Now prettier will format code on saving, eslint will show warning or error if there is any problem in your code.</p>\n<p>You can add the following scripts in your <code class=\"language-text\">package.json</code> file. So that whenever you want to format or lint the entire codebase, you only have to run an npm command.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// other scripts</span>\n    <span class=\"token property\">\"prettier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --ignore-path .gitignore \\\"**/*.+(js|json)\\\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"check-format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run prettier -- --list-different\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run prettier -- --write\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ignore-path .gitignore --ext .js\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In another post, I will try to show how to automate the process of linting and code formatting of the entire codebase before each commit to git.</p>","timeToRead":2,"excerpt":"One of the best ways to make a codebase maintainable and consistent is to follow a proper code formatting and coding style. In a codebase…","frontmatter":{"title":"Setting Up ESLint And Prettier In A Node Project","publishedAt":"2021-10-29","tags":["javascript","prettier","eslint"],"slug":"setting-up-eslint-and-prettier-in-a-node-project"},"fields":{"slug":"/2021/10/29/setting-up-eslint-and-prettier-in-a-node-project/"}}},"pageContext":{"slug":"/2021/10/29/setting-up-eslint-and-prettier-in-a-node-project/","prev":{"frontmatter":{"tags":["gatsby","github actions"],"title":"Load Google Analytics (gtag) Efficiently in Gatsby Site"},"fields":{"slug":"/2021/09/11/load-gtag-efficiently-in-gatsby/"}},"next":{"frontmatter":{"tags":["node","aws","aws lambda","aws sqs"],"title":"Testing AWS Lambda and SQS locally with Node.js"},"fields":{"slug":"/2019/11/15/testing-aws-lambda-and-sqs-locally-with-nodejs/"}}}},"staticQueryHashes":["1066969672","1349029593","2767800352","3803536959","3825412538","3941996707","4259536812"]}